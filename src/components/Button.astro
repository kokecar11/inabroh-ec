---
import clsx from 'clsx'

interface Props {
	variant?: ButtonVariant
	size?: ButtonSize
	isOnlyIcon?: boolean
}

export enum ButtonSize {
	xs = 'xs',
	sm = 'sm',
	base = 'base',
	lg = 'lg',
}

const Sizes: Record<ButtonSize, string> = {
	[ButtonSize.xs]: 'py-1 px-2 text-xs h-6',
	[ButtonSize.sm]: 'py-1.5 px-3 text-sm h-8',
	[ButtonSize.base]: 'py-2 px-4 text-md h-10',
	[ButtonSize.lg]: 'py-3 px-5 text-base h-12',
}

const SizesOnlyIcon: Record<ButtonSize, string> = {
	[ButtonSize.xs]: 'w-6 h-6',
	[ButtonSize.sm]: 'w-8 h-8',
	[ButtonSize.base]: 'w-10 h-10 text-lg',
	[ButtonSize.lg]: 'w-12 h-12',
}

export enum ButtonVariant {
	primary = 'primary',
	secondary = 'secondary',
	accent = 'accent',
}

const Variants: Record<ButtonVariant, string> = {
	[ButtonVariant.primary]: 'bg-primary text-white hover:bg-primary/90',
	[ButtonVariant.secondary]: 'bg-white hover:bg-opacity-90 text-primary',
	[ButtonVariant.accent]: 'bg-accent hover:bg-opacity-90 text-primary',
}
const {
	variant = ButtonVariant.primary,
	isOnlyIcon,
	size = ButtonSize.base,
} = Astro.props

const setSizes = () => {
	if (isOnlyIcon) return SizesOnlyIcon[size]
	return Sizes[size]
}
const clasess = {
	button: clsx(
		'flex items-center justify-center relative overflow-hidden',
		'text-center whitespace-nowrap',
		'transition duration-100 ease-out',
		'disabled:opacity-50 disabled:cursor-default',
		'rounded-lg',
		Variants[variant],
		setSizes(),
		// {
		// 	'rounded-lg': !isSquare,
		// 	'w-full': isFullWidth,
		// 	'cursor-default opacity-30': isDisabled,
		// },
		// classNames,
	),
}
---

<button class={clasess.button}>
	<slot />
</button>
